"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _resultRx = _interopRequireDefault(require("./result-rx"));

var _transactionRx = _interopRequireDefault(require("./transaction-rx"));

/**
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars

/**
 * Represents a rx transaction that is managed by the transaction executor.
 *
 * @public
 */
var RxManagedTransaction = /*#__PURE__*/function () {
  /**
   * @private
   */
  function RxManagedTransaction(_ref) {
    var run = _ref.run;
    (0, _classCallCheck2["default"])(this, RxManagedTransaction);
    this._run = run;
  }
  /**
   * @private
   * @param {RxTransaction} txc - The transaction to be wrapped
   * @returns {RxManagedTransaction} The managed transaction
   */


  (0, _createClass2["default"])(RxManagedTransaction, [{
    key: "run",
    value:
    /**
     * Creates a reactive result that will execute the query in this transaction, with the provided parameters.
     *
     * @public
     * @param {string} query - Query to be executed.
     * @param {Object} parameters - Parameter values to use in query execution.
     * @returns {RxResult} - A reactive result
     */
    function run(query, parameters) {
      return this._run(query, parameters);
    }
  }], [{
    key: "fromTransaction",
    value: function fromTransaction(txc) {
      return new RxManagedTransaction({
        run: txc.run.bind(txc)
      });
    }
  }]);
  return RxManagedTransaction;
}();

var _default = RxManagedTransaction;
exports["default"] = _default;